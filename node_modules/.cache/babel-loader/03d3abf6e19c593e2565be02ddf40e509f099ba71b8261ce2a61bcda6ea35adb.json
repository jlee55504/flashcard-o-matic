{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport home from '../imgs/home.png';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { readDeck, updateCard, readCard } from '../utils/api/index';\nimport { Image, Button } from 'react-bootstrap';\nfunction EditCard() {\n  /*  const { deckId, cardId } = useParams();\n      const [frontCardText, setFrontCardText] = useState(\"\");\n      const [backCardText, setBackCardText] = useState(\"\")\n      const navigate = useNavigate();\n      const [deck, setDeck] = useState({});\n      const [card, setCard] = useState({});\n      const [waitForCardToUpdate, setWaitForCardToUpdate] = useSate(false);\n      useEffect(() => {\n          const abortController = new AbortController();\n          async function getDeck() {\n              const currentDeck = await readDeck(deckId, abortController.signal);\n              setDeck(currentDeck);\n              const currentCard = await readCard(cardId, abortController.signal);\n              setCard(currentCard);\n          } getDeck();\n      }, [card]);\n  \n      useEffect(() => {\n          if (card != {} && waitForCardToUpdate) {\n              console.log(card);\n              //updateCard(card);\n              set\n          }\n      }, [waitForCardToUpdate])\n  \n      const handleChange = ({ target }) => {\n          if (target.name === \"EditCard-front-text\") setFrontCardText(target.value);\n          else if (target.name === \"EditCard-back-text\") setBackCardText(target.value);\n      }\n  \n      const handleSubmit = event => {\n          event.preventDefault();\n          setCard({\n              id: Number(card.id),\n              front: frontCardText,\n              back: backCardText,\n              deckId: Number(card.deckId)\n          });\n          setWaitForCardToUpdate(true);\n      }\n      return (\n          <>\n              <h1>Edit Card</h1>\n              <form onSubmit={handleSubmit}>\n                  <label htmlfor=\"EditCard-front-text\" >\n                      Front\n                      <input id=\"EditCard-front-text\" name=\"EditCard-front-text\"\n                       value={frontCardText} type=\"text\" placeholder={card.front}\n                        onChange={handleChange} required ></input>\n                  </label>\n                  <label htmlfor=\"EditCard-back-text\" >Back\n                      <textarea id=\"EditCard-back-text\" name=\"EditCard-back-text\" \n                      value={backCardText} placeholder={card.back} required \n                       onChange={handleChange}></textarea>\n                  </label>\n                  <Button type=\"button\" className=\"EditCard-cancel-btn\" onClick={() => navigate(`/decks/${deckId}`)} >Cancel</Button>\n                  <Button type=\"submit\" className=\"EditCard-submit-btn\" >Submit</Button>\n              </form>\n          </>\n      )\n  */\n}\n_c = EditCard;\nexport default EditCard;\nvar _c;\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"names":["React","useState","useEffect","home","useParams","useNavigate","Link","readDeck","updateCard","readCard","Image","Button","EditCard","_c","$RefreshReg$"],"sources":["C:/Users/larry/Desktop/flashcard-o-matic-project/src/cards/EditCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport home from '../imgs/home.png';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { readDeck, updateCard, readCard } from '../utils/api/index';\nimport { Image, Button } from 'react-bootstrap';\nfunction EditCard() {\n/*  const { deckId, cardId } = useParams();\n    const [frontCardText, setFrontCardText] = useState(\"\");\n    const [backCardText, setBackCardText] = useState(\"\")\n    const navigate = useNavigate();\n    const [deck, setDeck] = useState({});\n    const [card, setCard] = useState({});\n    const [waitForCardToUpdate, setWaitForCardToUpdate] = useSate(false);\n    useEffect(() => {\n        const abortController = new AbortController();\n        async function getDeck() {\n            const currentDeck = await readDeck(deckId, abortController.signal);\n            setDeck(currentDeck);\n            const currentCard = await readCard(cardId, abortController.signal);\n            setCard(currentCard);\n        } getDeck();\n    }, [card]);\n\n    useEffect(() => {\n        if (card != {} && waitForCardToUpdate) {\n            console.log(card);\n            //updateCard(card);\n            set\n        }\n    }, [waitForCardToUpdate])\n\n    const handleChange = ({ target }) => {\n        if (target.name === \"EditCard-front-text\") setFrontCardText(target.value);\n        else if (target.name === \"EditCard-back-text\") setBackCardText(target.value);\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setCard({\n            id: Number(card.id),\n            front: frontCardText,\n            back: backCardText,\n            deckId: Number(card.deckId)\n        });\n        setWaitForCardToUpdate(true);\n    }\n    return (\n        <>\n            <h1>Edit Card</h1>\n            <form onSubmit={handleSubmit}>\n                <label htmlfor=\"EditCard-front-text\" >\n                    Front\n                    <input id=\"EditCard-front-text\" name=\"EditCard-front-text\"\n                     value={frontCardText} type=\"text\" placeholder={card.front}\n                      onChange={handleChange} required ></input>\n                </label>\n                <label htmlfor=\"EditCard-back-text\" >Back\n                    <textarea id=\"EditCard-back-text\" name=\"EditCard-back-text\" \n                    value={backCardText} placeholder={card.back} required \n                     onChange={handleChange}></textarea>\n                </label>\n                <Button type=\"button\" className=\"EditCard-cancel-btn\" onClick={() => navigate(`/decks/${deckId}`)} >Cancel</Button>\n                <Button type=\"submit\" className=\"EditCard-submit-btn\" >Submit</Button>\n            </form>\n        </>\n    )\n*/\n\n}\n\nexport default EditCard;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,kBAAkB;AACnC,SAASC,SAAS,EAAEC,WAAW,EAAEC,IAAI,QAAQ,kBAAkB;AAC/D,SAASC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,oBAAoB;AACnE,SAASC,KAAK,EAAEC,MAAM,QAAQ,iBAAiB;AAC/C,SAASC,QAAQA,CAAA,EAAG;EACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DCC,EAAA,GA/DQD,QAAQ;AAiEjB,eAAeA,QAAQ;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}